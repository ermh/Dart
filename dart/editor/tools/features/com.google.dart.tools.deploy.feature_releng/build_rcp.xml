<!--
This build script will build the Dart RCP and Dart update site.  

This script will setup the PDE build structure and then call into the PDE
build system.  The PDE build system has to run under Eclipse.
-->
<project name="build_dart" default="build_rcp">
    
    <import file="build-common.xml" />

    <target name="deploy_rcp" depends="build_rcp, doDeploy_rcp" />
    
    <target name="build_rcp" depends="init, setupBuild, doBuild_rcp, package_rcp" />
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: buildBot
         - - - - - - - - - - - - - - - - - -->
    <target name="buildBotFastFail">
        <echoProperty propertyname="user.name" />
        <echoProperty propertyname="build.root" />
        <echoProperty propertyname="build.out" />
        <echoProperty propertyname="build.source" />
        
        <condition property="build.running.headless" value="true">
            <equals arg1="chrome-bot" arg2="${user.name}" trim="true" />
        </condition>
        <property name="build.running.headless" value="false" />
        
        <fail>
            <condition>
                <and>
                    <istrue value="${build.running.headless}" />
                    <not>
                        <and>
                            <isset property="build.root" />
                            <isset property="build.out" />
                            <isset property="build.source" />
                        </and>
                    </not>
                </and>
            </condition>
            This code is running under BuildBot and the following properties are not set at the 
            start of the build:
            build.root
            build.out
            build.source
            These properties should have been set by the Python code
        </fail>
    </target>

    <!--
    initializethe build environment by cleaning up the builchrome-botd.tmp directory and 
    creating the needed directories
    -->
    <target name="init" depends="buildBotFastFail">
        <property environment="env" />
        <echoproperties prefix="env." />

        <tstamp>
            <format property="build.date" pattern="yyyyMMddHHmm" />
        </tstamp>
        <echoProperty propertyName="ant.file" />
        <echoProperty propertyName="ant.home" />
        <echoProperty propertyName="ant.version" />
        <echoProperty propertyName="java.home" />
        <echoProperty propertyName="java.vendor" />
        <echoProperty propertyName="java.version" />
        <echoProperty propertyName="user.name" />
        <echoProperty propertyName="dataLocation" />
        <condition property="data.location" value="${dataLocation}">
            <isset property="dataLocation" />
        </condition>
        <property name="data.location" location="./build-settings" />
        <echoProperty propertyName="data.location" />
        <!--
          validate that the data location is a directory
        -->
        <fail>Error: 
            data.location must be set to a valid directory containing the configuration properties file.
            the current value is ${data.location}.
            <condition>
                <not>
                    <available file="${data.location}" type="dir" />
                </not>
            </condition>
        </fail>
        <property name="user.property.file" location="${data.location}/${user.name}.properties" /> 
        <property name="default-user.property.file" location="${data.location}/default-user.properties" /> 
        <property name="eclipse.property.file" location="${data.location}/eclipse-platform.properties" />
        <echo message="reading ${eclipse.property.file}" />
        <property file="${eclipse.property.file}" />
        <echo message="reading ${user.property.file}" />
        <property file="${user.property.file}" />
        <!--
          validate that the default-user.property file exists
        -->
        <fail>Error: 
            ${default-user.property.file} must exist.
            <condition>
                <not>
                    <available file="${default-user.property.file}" type="file" />
                </not>
            </condition>
        </fail>
        
        <!-- 
          validate the the build.source is a directory
        -->
        <fail>Error: 
            build.source must be set to the root of the dart Eclipse tree it must be a directory 
            containing the source for the Dart Eclipse product.  
            The current value is ${build.source}.
            <condition>
                <not>
                    <available file="${build.source}" type="dir" />
                </not>
            </condition>
        </fail>
        <!--
          validate that ${build.source}/docs/README.txt exists
        -->
        <fail>Error: 
            It appears that build.source is not pointing to the root of the Dart Eclipse tree.
            The build is trying to verify that file ${build.source}/docs/README.txt is a file. 
            The current value is ${build.source}/dart/bundle/README.txt.
            <condition>
                <not>
                    <available file="${build.source}/docs/README.txt" type="file" />
                </not>
            </condition>
        </fail>
        
        <property environment="env" />
        <condition property="build.revision" value="${env.BUILDBOT_GOT_REVISION}">
            <isset property="env.BUILDBOT_GOT_REVISION" />
        </condition>
        <property name="build.revision" value="unknown" />
        <dirname file="${build.source}" property="build.source.root"/>

	<property name="build.thirdparty" location="${build.source.root}/third_party" />
        
        <property file="${default-user.property.file}" />
        <property name="build.stage.scripts" location="${build.stage}/scripts" />
        <echoproperties prefix="java." />
        <echoproperties prefix="build." />
        <property name="build.runtime.abs" location="${build.runtime}" />
        <property name="build.target.abs" location="${build.target}" />
        <property name="build.stage.abs" location="${build.stage}" />
        <echoproperties prefix="build." destfile="/var/tmp/${build.builder}-build.properties"/>
        <echoProperty propertyName="eclipse-sdk.3.8.url" />
        <echoProperty propertyName="eclipse-sdk.3.8.linux.gtk.x86.zip" />
        <echoProperty propertyName="eclipse-sdk.3.7.url" />
        <echoProperty propertyName="eclipse-sdk.3.7.linux.gtk.x86.zip" />
        <echoProperty propertyName="eclipse-sdk.3.6.url" />
        <echoProperty propertyName="eclipse-sdk.3.6.linux.gtk.x86.zip" />
        <!--
        cleanup the build.tmp and build.out directory
        -->
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${build.tmp}" />
            <fileset dir="${build.out}" />
        </delete>
        <!--
        create the build structure
        -->
        <mkdir dir="${build.downloads}" />

        <mkdir dir="${build.runtime}" />
        <mkdir dir="${build.target}" />
        <mkdir dir="${build.stage.plugins}" />
        <mkdir dir="${build.stage.features}" />
        <mkdir dir="${build.out}" />

    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: setupRuntimeEclipse
         - - - - - - - - - - - - - - - - - -->
    <target name="setupRuntimeEclipse">
        <setupEclipse location="${build.runtime}" eclipse="${build.runtime.eclipse.version}"
                      arch="${build.eclipse.arch}" />
        <fileset dir="${build.runtime}/eclipse/plugins" id="launcherFs" >
            <include name="*launcher_*.jar" />
        </fileset>
        <pathconvert property="eclipse.runtime.launcher.jar" refid="launcherFs" />
    </target>

    <!--
    copy the code from the svn structure to the PDE structure and get rid of the linked resources
    -->
    <target name="setupBuild" depends="init, setupRuntimeEclipse" >
        <setupTargetEclipse location="${build.target}" eclipse="${build.target.eclipse.version}"
                            arch="${build.eclipse.arch}" />
        <!-- installDirIntoTargetEclipse updatesite="${build.source.root}/third_party/chromesdk/0.3.0"
                                     ius="org.chromium.sdk.feature.group"
                                     uniqueId="chrome"/ -->
        <!-- installDirIntoTargetEclipse updatesite="${build.source.root}/third_party/usageprofiler"
                                     ius="com.google.gdt.eclipse.usageprofiler.feature.feature.group"
                                     uniqueId="profiler"/-->
        
        <ant antfile="build.xml" dir="${build.source.root}/third_party/closure_compiler_src"
             inheritall="false" inheritrefs="false" />
        <property name="eclipse.runtime.dir"
                  value="${build.runtime}/eclipse" />
        <mkdir dir="${build.stage.plugins}" />
        <mkdir dir="${build.stage.features}" />

        <copy todir="${build.stage.plugins}">
            <fileset dir="${build.source}/tools/plugins">
                <exclude name="*.debug.*/**" />
                <exclude name="*_test/**" />
            </fileset>
        </copy>
        <copy todir="${build.stage.features}">
            <fileset dir="${build.source}/tools/features">
                <exclude name="*.debug.*/**" />
                <exclude name="*.tests.*/**" />
            </fileset>
        </copy>
        
        <replace dir="${build.stage.features}/com.google.dart.tools.deploy.feature">
            <include name="*.html" />
            <include name="*.mappings" />
            <replacefilter token="@BUILDDATE@" value="${build.date}" />
            <replacefilter token="@REVISION@" value="${build.revision}" />
        </replace>
        
        <!-- create the samples directory -->
        <property name="samples.out.dir" 
                  value="${build.stage.features}/com.google.dart.tools.deploy.feature/include/samples" />
    
        <!-- Clock -->
        <copy todir="${samples.out.dir}/clock">
            <fileset dir="${build.source.root}/samples/clock">
            </fileset>
        </copy>

        <!-- Hi -->
        <!-- copy todir="${samples.out.dir}/hi">
            <fileset dir="${build.source.root}/client/samples/hi">
            </fileset>
        </copy -->

        <!-- Isolate -->
        <copy todir="${samples.out.dir}/isolate">
            <fileset dir="${build.source.root}/client/samples/isolate">
              <exclude name="main.py"/>
              <exclude name="deploy.sh"/>
              <exclude name="app.yaml"/>
            </fileset>
        </copy>
        <replace file="${samples.out.dir}/isolate/isolate_sample.html" token='"isolate_sample.js"' value='"isolate_sample.app.js"'/>

        <!-- Slider -->
        <copy todir="${samples.out.dir}/slider">
            <fileset dir="${build.source.root}/client/samples/slider">
            </fileset>
        </copy>
        <replace file="${samples.out.dir}/slider/slider_sample.html" token='"slider_sample.js"' value='"slider_sample.app.js"'/>

        <!-- Swarm -->
        <!-- copy todir="${samples.out.dir}/swarm">
            <fileset dir="${build.source.root}/client/samples/swarm">
            </fileset>
        </copy -->

        <!-- Sunflower -->
        <copy todir="${samples.out.dir}/sunflower">
            <fileset dir="${build.source.root}/client/samples/sunflower">
            </fileset>
        </copy>

        <!-- Total -->
        <copy todir="${samples.out.dir}/total">
            <fileset dir="${build.source.root}/client/samples/total">
              <exclude name="bin/**"/>
              <exclude name=".project"/>
              <exclude name="codereview.settings"/>
              <exclude name="src/Server.dart"/>
            </fileset>
        </copy>
        <replace file="${samples.out.dir}/total/src/Total.html" token='src="Total.dart.app.js"' value='src="Total.app.js"'/>

        <!-- copy bundled Dart libraries -->
        <property name="dart.compiler.js.dir" 
                  value="${build.stage.plugins}/com.google.dart.compiler.js" />
        <mkdir dir="${dart.compiler.js.dir}/src-compiler" />
        <copy todir="${dart.compiler.js.dir}/src-compiler">
             <fileset dir="${build.source.root}/compiler/java" />
        </copy>
        
        <mkdir dir="${dart.compiler.js.dir}/third_party" />
        <copy todir="${dart.compiler.js.dir}/third_party">
            <fileset dir="${build.source.root}/third_party" />
        </copy>
        
        <property name="dart.library.core.dir"
                  value="${build.stage.plugins}/com.google.dart.library.core" />

        <mkdir dir="${dart.library.core.dir}/src-corelib" />
        <copy todir="${dart.library.core.dir}/src-corelib">
            <fileset dir="${build.source.root}/corelib" />
        </copy>

        <mkdir dir="${dart.library.core.dir}/src-corelib-dartc" />
        <copy todir="${dart.library.core.dir}/src-corelib-dartc">
            <fileset dir="${build.source.root}/compiler/lib" />
        </copy>

        <property name="dart.library.dom.dir" 
                  value="${build.stage.plugins}/com.google.dart.library.dom" />
            
        <mkdir dir="${dart.library.dom.dir}/src-dom" />
        <copy todir="${dart.library.dom.dir}/src-dom">
             <fileset dir="${build.source.root}/client/dom" />
        </copy>
        
        <property name="dart.library.html.dir" 
                  value="${build.stage.plugins}/com.google.dart.library.html" />

        <mkdir dir="${dart.library.html.dir}/src-html" />
        <copy todir="${dart.library.html.dir}/src-html">
             <fileset dir="${build.source.root}/client/html" />
        </copy>

        <property name="dart.library.json.dir" 
                  value="${build.stage.plugins}/com.google.dart.library.json" />

        <mkdir dir="${dart.library.json.dir}/src-json" />
        <copy todir="${dart.library.json.dir}/src-json">
             <fileset dir="${build.source.root}/client/json" />
        </copy>

        <!-- replace the path based imports with the symbolic ones -->

        <!-- #import('../../html/html.dart'); ==> #import('dart:html'); -->
        <replace dir="${samples.out.dir}"
          token="#import('../../html/html.dart');"
          value="#import('dart:html');">
          <include name="**/*.dart"/>
        </replace>

        <replace dir="${samples.out.dir}"
          token='#import("../../../html/html.dart");'
          value='#import("dart:html");'>
          <include name="**/*.dart"/>
        </replace>

        <replace dir="${samples.out.dir}"
          token="#import('../../"
          value="#import('../../libraries/">
          <include name="**/*.dart"/>
        </replace>

        <!-- copy over the dart libraries used by the samples -->

        <property name="libraries.out.dir" 
                  value="${build.stage.features}/com.google.dart.tools.deploy.feature/include/libraries" />

        <copy todir="${libraries.out.dir}/base">
            <fileset dir="${build.source.root}/client/base"/>
        </copy>
        <copy todir="${libraries.out.dir}/json">
            <fileset dir="${build.source.root}/client/json"/>
        </copy>
        <copy todir="${libraries.out.dir}/layout">
            <fileset dir="${build.source.root}/client/layout"/>
        </copy>
        <copy todir="${libraries.out.dir}/observable">
            <fileset dir="${build.source.root}/client/observable"/>
        </copy>
        <copy todir="${libraries.out.dir}/touch">
            <fileset dir="${build.source.root}/client/touch"/>
        </copy>
        <copy todir="${libraries.out.dir}/util">
            <fileset dir="${build.source.root}/client/util"/>
        </copy>
        <copy todir="${libraries.out.dir}/view">
            <fileset dir="${build.source.root}/client/view"/>
        </copy>

        <replace dir="${libraries.out.dir}"
          token="#import('../html/html.dart');"
          value="#import('dart:html');">
          <include name="**/*.dart"/>
        </replace>
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: doBuild_rcp              
         - - - - - - - - - - - - - - - - - -->
    <target name="doBuild_rcp" depends="init, setupBuild">
        <dirset dir="${build.runtime}/eclipse/plugins" id="pde.ds">
            <include name="*pde.build_*" />
        </dirset>
        <pathconvert property="pde.build.dir" refid="pde.ds" setonempty="false"/>
        <property name="pde.scripts.update" location="${pde.build.dir}/scripts" />
        <property name="pde.scripts.rcp" location="${pde.build.dir}/scripts/productBuild" />
        <echo message="PDE is located in ${pde.build.dir}" /> 
        <mkdir dir="${build.stage.scripts}" />
        <copy todir="${build.stage.scripts}" file="build.properties" />
        <runAntBuildInEclipse script="${pde.scripts.rcp}/productBuild.xml" eclipse="3.7"
                              builddir="${build.stage.scripts}" />
    </target>
    
    <!-- - - - - - - - - - - - - - - - - - 
          target: package_rcp                      
         - - - - - - - - - - - - - - - - - -->
    <target name="package_rcp" depends="init, setupBuild, doBuild_rcp" >
        <property file="build.properties" prefix="pde." />
        <copy todir="${build.out}">
            <fileset dir="${build.stage}/${pde.buildLabel}">
                <include name="*.zip" />
            </fileset>
        </copy>
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: doDeploy_rcp                      
         - - - - - - - - - - - - - - - - - -->
    <target name="doDeploy_rcp" depends="init, setupBuild, doBuild_rcp, package_rcp">
    </target>

</project>
