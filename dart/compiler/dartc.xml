<project default="dist">
  <import file="sources.xml"/>
  <import file="test_sources.xml"/>
  <import file="corelib_sources.xml"/>
  <import file="compiler_corelib_sources.xml"/>
  <import file="domlib_sources.xml"/>
  <import file="htmllib_sources.xml"/>
  <import file="jsonlib_sources.xml"/>

  <!--
    The file build.properties does not exist. If provided, properties can be customized.
  -->
  <property file="build.properties" />

  <!--
    Configuration properties.
  -->
  <property name="build.dir" value="out"/>

  <property name="build.classes.dir" value="${build.dir}/classes"/>

  <property name="corelib.source.dir" value="${build.dir}/corelib"/>

  <property name="domlib.source.dir" value="${build.dir}/../client/dom/"/>

  <property name="htmllib.source.dir" value="${build.dir}/../client/html/"/>

  <property name="jsonlib.source.dir" value="${build.dir}/../client/json/"/>

  <property name="build.test.classes.dir" value="${build.dir}/test/classes"/>

  <property name="dartc.jar" value="${build.dir}/dartc.jar"/>

  <property name="corelib.jar" value="${build.dir}/corelib.jar"/>

  <property name="domlib.jar" value="${build.dir}/domlib.jar"/>

  <property name="htmllib.jar" value="${build.dir}/htmllib.jar"/>

  <property name="jsonlib.jar" value="${build.dir}/jsonlib.jar"/>

  <property name="dist.dir" value="${build.dir}/dist"/>

  <property name="test.report.dir" value="${build.dir}/test"/>

  <property name="third_party.dir" value="../third_party"/>

  <property name="d8" value="$DARTC_HOME/bin/d8.$OS"/>

  <property name="test_py" location="../tools/test.py"/>

  <property name="closure_compiler.jar" value="${build.dir}/../closure_out/compiler.jar"/>

  <!--
    Define buildtime and runtime classpaths.
  -->
  <path id="classpath.compile">
    <pathelement location="${third_party.dir}/args4j/2.0.12/args4j-2.0.12.jar"/>
    <pathelement location="${closure_compiler.jar}" />
    <pathelement location="${third_party.dir}/guava/r09/guava-r09.jar"/>
    <pathelement location="${third_party.dir}/json/r2_20080312/json.jar"/>
    <pathelement location="${third_party.dir}/rhino/1_7R3/js.jar"/>
  </path>

  <path id="classpath.runtime">
    <path refid="classpath.compile"/>
  </path>

  <path id="classpath.compile.tests">
    <path refid="classpath.compile"/>
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${third_party.dir}/junit/v4_8_2/junit.jar"/>
  </path>

  <path id="classpath.run.tests">
    <path refid="classpath.compile.tests"/>
    <pathelement location="${build.test.classes.dir}"/>
    <pathelement location="${third_party.dir}/hamcrest/v1_3/hamcrest-core-1.3.0RC2.jar"/>
    <pathelement location="${third_party.dir}/hamcrest/v1_3/hamcrest-generator-1.3.0RC2.jar"/>
    <pathelement location="${third_party.dir}/hamcrest/v1_3/hamcrest-integration-1.3.0RC2.jar"/>
    <pathelement location="${third_party.dir}/hamcrest/v1_3/hamcrest-library-1.3.0RC2.jar"/>
  </path>

  <target name="compile" description="Compiles all of the java source and copies resources to the classes directory.">
    <!--
      Ensure the necessary subdirectories exist.
    -->
    <mkdir dir="${build.classes.dir}"/>

    <javac destdir="${build.classes.dir}"
           sourcepath=""
           srcdir="java"
           includes="${java_sources}"
           fork="true"
           debug="true">
      <classpath refid="classpath.compile"/>
    </javac>
    <!--
      Copy all non-java resources.
    -->
    <copy todir="${build.classes.dir}">
      <filelist refid="java_resources"/>
    </copy>
  </target>

  <!--
    We rely on GYP to call these targets when the dartc dependencies change, hence this
    ant file cannot be used standalone.
  -->
  <target name="corelib.jar" description="Packages the corelib resources into one jar file." >
    <delete file="${corelib.jar}"/>
    <mkdir dir="${corelib.source.dir}"/>
    <copy todir="${corelib.source.dir}/com/google/dart/corelib/src">
      <filelist refid="corelib_resources"/>
    </copy>
    <copy todir="${corelib.source.dir}/com/google/dart/corelib">
      <filelist refid="compiler_corelib_resources"/>
    </copy>
    <jar destfile="${corelib.jar}" basedir="${corelib.source.dir}"/>
    <touch file="${build.dir}/corelib.jar.stamp"/>
  </target>

  <target name="domlib.jar" description="Packages the dom library resources into one jar file." >
    <delete dir="${build.dir}/api/dart/dom"/>
    <delete file="${domlib.jar}"/>
    <mkdir dir="${domlib.source.dir}"/>
    <copy todir="${domlib.source.dir}/dom">
      <filelist refid="domlib_resources"/>
    </copy>
    <jar destfile="${domlib.jar}" basedir="${domlib.source.dir}"/>
    <touch file="${build.dir}/domlib.jar.stamp"/>
  </target>

  <target name="htmllib.jar" description="Packages the html library resources into one jar file." >
    <delete dir="${build.dir}/api/dart/html"/>
    <delete file="${htmllib.jar}"/>
    <mkdir dir="${htmllib.source.dir}"/>
    <copy todir="${htmllib.source.dir}/html" preservelastmodified="true">
      <filelist refid="htmllib_resources"/>
    </copy>
    <jar destfile="${htmllib.jar}" basedir="${htmllib.source.dir}"/>
    <touch file="${build.dir}/htmllib.jar.stamp"/>
  </target>

  <target name="jsonlib.jar" description="Packages the json library resources into one jar file." >
    <delete dir="${build.dir}/api/dart/json"/>
    <delete file="${jsonlib.jar}"/>
    <mkdir dir="${jsonlib.source.dir}"/>
    <copy todir="${jsonlib.source.dir}/json">
      <filelist refid="jsonlib_resources"/>
    </copy>
    <jar destfile="${jsonlib.jar}" basedir="${jsonlib.source.dir}"/>
    <touch file="${build.dir}/jsonlib.jar.stamp"/>
  </target>

  <target name="compile-tests" depends="compile" description="Compiles all of the java tests and copies the resources to the test classes directory." >
    <mkdir dir="${build.test.classes.dir}"/>
    <javac destdir="${build.test.classes.dir}"
           sourcepath=""
           srcdir="javatests"
           includes="${javatests_sources}"
           excludes="com/google/dart/compiler/vm/**"
           fork="true"
           debug="true">
      <classpath refid="classpath.compile.tests"/>
    </javac>
    <!--
      Copy the non-java resources.
    -->
    <copy todir="${build.test.classes.dir}">
      <filelist refid="javatests_resources"/>
    </copy>
  </target>

  <target name="dartc.jar" depends="compile" description="Creates a jar for dartc without bundling the dependencies.">
    <jar destfile="${dartc.jar}" basedir="${build.classes.dir}" manifest="dartc.mf"/>
  </target>

  <target name="syslib" depends="corelib.jar,domlib.jar,htmllib.jar,jsonlib.jar" description="Stub for system library task">
    <!--
      Copy the system library jars to the lib folder.
    -->
    <copy file="${corelib.jar}" todir="${dist.dir}/lib"/>
    <copy file="${domlib.jar}" todir="${dist.dir}/lib"/>
    <copy file="${htmllib.jar}" todir="${dist.dir}/lib"/>
    <copy file="${jsonlib.jar}" todir="${dist.dir}/lib"/>

    <touch file="${build.dir}/syslib.stamp"/>
  </target>

  <target name="syslib_clean" description="Clean out the system libraries">
    <delete file="${build.dir}/syslib.stamp"/>
  </target>

  <target name="dist" depends="dartc.jar" description="Creates a directory that contains a standalone distribution for dartc.">
    <!--
      Ensure the necessary subdirectories exist.
    -->
    <mkdir dir="${dist.dir}/bin"/>
    <mkdir dir="${dist.dir}/lib"/>

    <!--
      Copy the dart jar to the lib folder.
    -->
    <copy file="${dartc.jar}" todir="${dist.dir}/lib"/>

    <!--
      Copy the closure-compiler jar to the lib folder.
    -->
    <copy file="${closure_compiler.jar}" tofile="${dist.dir}/lib/closure-compiler.jar"/>

    <!--
      Re-root the classpaths from third_party into the lib folder of the distro.
    -->
    <pathconvert property="dartc.classpath.runtime.unix" targetos="unix" refid="classpath.runtime">
      <regexpmapper from="${third_party.dir}/(.*)" to="$DARTC_LIBS/\1"/>
    </pathconvert>

    <copy file="scripts/dartc.sh" tofile="${dist.dir}/bin/dartc">
      <filterset>
        <filter token="CLASSPATH" value="$DARTC_LIBS/dartc.jar:$DARTC_LIBS/corelib.jar:$DARTC_LIBS/domlib.jar:$DARTC_LIBS/htmllib.jar:$DARTC_LIBS/jsonlib.jar:$DARTC_LIBS/closure-compiler.jar:${dartc.classpath.runtime.unix}"/>
      </filterset>
    </copy>
    <chmod file="${dist.dir}/bin/dartc" perm="a+rx"/>

    <copy file="scripts/dartc_test.sh" tofile="${dist.dir}/bin/dartc_test">
      <filterset>
        <filter token="CLASSPATH" value="$DARTC_LIBS/dartc.jar:$DARTC_LIBS/corelib.jar:$DARTC_LIBS/domlib.jar:$DARTC_LIBS/htmllib.jar:$DARTC_LIBS/jsonlib.jar:$DARTC_LIBS/closure-compiler.jar:${dartc.classpath.runtime.unix}"/>
        <filter token="D8_EXEC" value="${d8}"/>
      </filterset>
    </copy>
    <chmod file="${dist.dir}/bin/dartc_test" perm="a+rx"/>

   <!--
      TODO: The following files are not strictly due to dist, move them out.
    -->
    <copy todir="${build.dir}">
      <fileset dir="scripts">
        <include name="dartc_run.sh"/>
        <include name="dartc_size.sh"/>
        <include name="dartc_metrics.sh"/>
      </fileset>
      <filterset>
        <filter token="CLASSPATH" value="$DARTC_LIBS/dartc.jar:$DARTC_LIBS/corelib.jar:$DARTC_LIBS/domlib.jar:$DARTC_LIBS/htmllib.jar:$DARTC_LIBS/jsonlib.jar:$DARTC_LIBS/closure-compiler.jar:${dartc.classpath.runtime.unix}"/>
      </filterset>
    </copy>
    <chmod file="${build.dir}/dartc_run.sh" perm="a+rx"/>
    <chmod file="${build.dir}/dartc_size.sh" perm="a+rx"/>
    <chmod file="${build.dir}/dartc_metrics.sh" perm="a+rx"/>

    <!--
      Copy of all of the dartc dependencies to the lib folder.
    -->
    <copy todir="${dist.dir}/lib">
      <path refid="classpath.runtime"/>
      <regexpmapper from="${third_party.dir}/(.*)" to="\1"/>
    </copy>
  </target>

  <target name="clean" description="Deletes the build output directory.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="tests.jar" depends="compile-tests">
    <jar destfile="${build.dir}/tests.jar" basedir="${build.test.classes.dir}"/>
  </target>
</project>
